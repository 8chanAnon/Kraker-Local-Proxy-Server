<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="icon" href="launch-8kun.ico">
<base target="_blank">

<title>SSL Certificate</title>

<style type="text/css">

body {
  text-align: center;
  font-size: 16px; line-height: 19px;
  font-family: 'times new roman', serif;
  color: brown; background-color: navajowhite;
}

p {
  margin: 13px 0;
}

h1 {
  margin: 8px 0 17px 0;
}

hr {
  margin: 9px 6px; border-color: burlywood; border-style: solid;
}

input[type=text] {
  height: 17px; font-size: 16px; outline: none;
  font-family: 'consolas', 'lucida console', monospace;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lightyellow burlywood;
  padding: 3px 5px 3px 5px; margin: 0 4px 0 4px;
  caret-color: navy; color: firebrick; background-color: seashell;
}

input[type=radio] {
  vertical-align: bottom; margin: 0 1px 3px 2px;
  filter: contrast(1.0) brightness(1.2) opacity(90%);
}

input[type=checkbox] {
  vertical-align: bottom; margin: 0 2px 3px 2px;
  filter: contrast(1.0) brightness(1.2) opacity(90%);
}

input.static {
  text-align: center; color: firebrick; background-color: papayawhip;
}

input.status {
  text-align: center; color: firebrick; background-color: greenyellow; border-radius: 4px;
}

input.invisi {
  display: none;
}

button {
  width: 140px; height: auto;
  font-size: 15px; line-height: 19px;
  padding: 1px 6px 1px 6px; margin: 0 4px 0 4px;
  font-family: 'helvetica', sans-serif;
  color: saddlebrown; background-color: powderblue;
  outline: none; border-color: #e8e8e8 #9c9c9c #9c9c9c #ececec;
}

button:hover:active {
  border-color: #a8a8a8 #f8f8f8 #f4f4f4 #acacac;
}

button.pink {
  width: 75px; color: saddlebrown; background-color: pink;
}

.command p {
  display: inline-block; vertical-align: top; color: green;
  text-align: center; line-height: 33px; margin: 3px 4px 5px 4px;
}

.command input[type=text] {
}

.command input[type=checkbox] {
  width: auto; margin-bottom: 9px;
}

.command span {
  display: block; width: 100%; height: 5px;
}

textarea {
  width: 90vw; height: calc(100vh - 500px);
  min-height: 100px; padding: 5px 10px; margin-top: 8px;
  vertical-align: top; white-space: pre-wrap; outline: none; resize: none;
  font-size: 13px; font-family: 'verdana', 'helvetica', san-serif;
  caret-color: maroon; border: 2px solid burlywood;
  color: mediumblue; background-color: lavenderblush;
}

::selection {
  color: yellow; background-color: orchid;
}

r_ { color: crimson; }
g_ { color: green; }
b_ { color: blue; }

</style></head>

<body onload="javascript:init()">

<h1 style="margin:15px 0 18px 0"><r_>SSL Certificate</r_></h1><hr>

<div class="command">

<p style="text-align:right">RSA Key<br>Authority<br>Certificate</p>

<p>
<input type=text id="https-key" size=25 value="_https_key.pem"><br>
<input type=text id="auth-cert" size=25 value="_auth_cert.crt"><br>
<input type=text id="https-crt" size=25 value="_https_crt.pem"></p>

<p><br>
<button onclick="javascript:view_auth_cert()" class="pink">View</button><br>
<button onclick="javascript:view_https_crt()" class="pink">View</button></p>

<p>
<button onclick="javascript:make_https_key()">Create Key</button><br>
<button onclick="javascript:make_auth_cert()">Create Authority</button><br>
<button onclick="javascript:make_https_crt()">Create Certificate</button></p>

</div><hr><div class="command" id="names" style="margin-top:-10px">

<p style="text-align:right">
<br>Country<br>Organization<br>Organizational Unit<br>Common Name<br>
<span></span><r_>Start / End</r_></p>

<p>Issuer<br>
<input type=text size=20 class="static" disabled><br>
<input type=text size=20 class="static" disabled><br>
<input type=text size=20 class="static" disabled><br>
<input type=text size=20 class="static" disabled><br>
<span></span>
<input type=text size=20 class="static" disabled></p>

<p>Subject<br>
<input type=text size=20 maxlength=2><br>
<input type=text size=20 maxlength=30><br>
<input type=text size=20 maxlength=30><br>
<input type=text size=20 maxlength=30><br>
<span></span>
<input type=text size=20 class="static" disabled></p>

<p style="text-align:right;margin-left:12px"><br>
Signature Algo<br>Duration<br><br><br>
<span></span><r_>Status</r_></p>

<p><br>
<input type=text size=20 class="static" disabled><br>
<input type=text size=20 class="static" disabled><br>
<input type=text size=20 class="invisi" disabled><br>
<input type=text size=20 class="invisi" disabled><br>
<span></span>
<input type=text size=20 class="status" disabled></p>

<hr><div>Subject Alternate Names<br><textarea id="altnames"></textarea></div>

<div>

</body>

<script src="jsrsasign-all-min.js"></script>

<script>

var stat = document.getElementById ("names"); stat = stat.getElementsByTagName ("input");

var localhost, resp, data, state = stat [14], sub = ["/C=", "/O=", "/OU=", "/CN="];

var init = function ()
{
  localhost = document.location.origin + "/";

  if (document.location.hostname != "localhost")
  {
    localhost = ""; alert ("This page must be loaded from the Kraker Local Proxy Server.");
  }

  for (var n = 0; n < stat.length; n++) stat [n].value = "";
  document.getElementById ("altnames").value = "";
}

var pullstring = function (s, t, u)
{
  var m = t.length, n = s.indexOf (t) + m;
  m = n < m ? -1 : (u ? s.indexOf (u, n) : s.length);
  return (m < 0 ? "" : s.substr (n, m - n));
}

var view_auth_cert = function ()
{
  view_certificate (document.getElementById ("auth-cert").value);
}

var view_https_crt = function ()
{
  view_certificate (document.getElementById ("https-crt").value);
}

var time_str = function (time)
{
  time = new Date (KJUR.jws.IntDate.get (time) * 1000).toISOString();
  return (time.substr (0, 10) + " " + time.substr (11, 8));
}

var time_offset = function (time1, time2)
{
  var time = KJUR.jws.IntDate.get (time2) - KJUR.jws.IntDate.get (time1);
  var H = time / 3600, D = Math.trunc (H / 24), Y = Math.trunc (D / 365);
  H -= D * 24; D -= Y * 365; H = Math.trunc (H * 10) / 10;
  return (Y + "-Y, " + D + "-D, " + H + "-H");
}

const view_certificate = async (pem) =>
{
  init(); var n, a, b, c;

  try {
    resp = await fetch (pem); data = await resp.text();
    } catch (e) { console.log (e); data = ""; }

  if (!data) { state.value = "ERROR"; return; }

  var x509 = new X509(); x509.readCertPEM (data); data = x509.getParam();
  var time1 = data.notbefore, time2 = data.notafter;

  stat [4].value = time_str (time1); stat [9].value = time_str (time2);
  stat [10].value = data.sigalg; stat [11].value = time_offset (time1, time2);

  a = data.issuer.str + "/";
  for (n = 0; n < 4; n++) stat [n].value = pullstring (a, sub [n], "/");

  a = data.subject.str + "/";
  for (n = 0; n < 4; n++) stat [n+5].value = pullstring (a, sub [n], "/");

  a = data.ext; b = "";
  for (n = 0; n < a.length; n++) if (a [n].extname == "subjectAltName") b = a [n].array;

  a = ""; if (b) for (n = 0; n < b.length; n++) if (c = b [n]["dns"]) a += ", " + c;

  document.getElementById ("altnames").value = a.substr (2); state.value = "OK";
}

var new_certificate = function (key, crt)
{
  var m, n, altnames = [], issuer, subject = "";

  for (n = 0; n < 4; n++) if (m = stat [n+5].value.trim())
    { if (!n) m = m.toUpperCase(); subject += sub [n] + m; }

  if (!crt) issuer = subject; else
  {
    m = document.getElementById ("altnames").value;
    m = m.replace (/,\s+|\,|\s/gm, " ").trim().split (" ");
    for (n = 0; n < m.length; n++) if (m [n]) altnames.push ({ dns: m [n] });
    var x509 = new X509(); x509.readCertPEM (crt); issuer = x509.getSubject().str;
  }

  var time1 = Date.now() / 1000, time2 = time1 + 3650 * 86400;

  time1 = KJUR.jws.IntDate.intDate2Zulu (time1);
  time2 = KJUR.jws.IntDate.intDate2Zulu (time2);
  n = Math.trunc (Math.random() * 100000 + 100000);

  return new KJUR.asn1.x509.Certificate
  ({
    version: 3, serial: { int: n },
    cakey: key, sbjpubkey: key, sigalg: "SHA256withRSA",
    issuer: { str: issuer }, subject: { str: subject },
    notbefore: time1, notafter: time2,
    ext: [
      { extname: "basicConstraints", cA: crt ? false : true },
      { extname: "subjectAltName", array: altnames } ]
  });
}

const make_https_key = async () =>
{
  state.value = "Working...";
  // wait for button to pop back up because keygen is slow
  await new Promise (x => setTimeout (x, 100));

  var put = document.getElementById ("https-key").value;

  data = KEYUTIL.generateKeypair ("RSA", 1024);
  data = KEYUTIL.getPEM (data.prvKeyObj, "PKCS1PRV");console.log(data);

  try {
    resp = await fetch (put, { method: 'PUT', body: data });
    if (resp.status != 200) throw ("File write error");
    } catch (e) { console.log (e); data = ""; }

  state.value = data ? "Success" : "Failed";
}

const make_auth_cert = async () =>
{
  state.value = "Working...";

  var key = document.getElementById ("https-key").value;
  var put = document.getElementById ("auth-cert").value;

  try {
    resp = await fetch (key); data = await resp.text();
    } catch (e) { console.log (e); data = ""; }

  if (!(key = data)) { state.value = "Key file error"; return; }

  try {
    data = new_certificate (key, null).getPEM();
    resp = await fetch (put, { method: 'PUT', body: data });
    if (resp.status != 200) throw ("File write error");
    } catch (e) { console.log (e); data = ""; }

  state.value = data ? "Success" : "Failed";
}

const make_https_crt = async () =>
{
  state.value = "Working...";

  var key = document.getElementById ("https-key").value;
  var crt = document.getElementById ("auth-cert").value;
  var put = document.getElementById ("https-crt").value;

  try {
    resp = await fetch (key); data = await resp.text();
    } catch (e) { console.log (e); data = ""; }

  if (!(key = data)) { state.value = "Key file error"; return; }

  try {
    resp = await fetch (crt); data = await resp.text();
    } catch (e) { console.log (e); data = ""; }

  if (!(crt = data)) { state.value = "Auth file error"; return; }

  try {
    data = new_certificate (key, crt).getPEM();
    resp = await fetch (put, { method: 'PUT', body: data });
    if (resp.status != 200) throw ("File write error");
    } catch (e) { console.log (e); data = ""; }

  state.value = data ? "Success" : "Failed";
}

</script>

</html>
