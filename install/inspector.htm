<!DOCTYPE html><html><head>
<meta name='viewport' content='width=device-width, initial-scale=1.0'>
<meta charset='utf-8'>

<title>Inspector</title>

<style type='text/css'>

body {
  padding: 0 2px 0 1px; text-align: center;
  font-size: 16px; line-height: 19px; font-family: 'times new roman', serif;
  color: steelblue; background-color: lemonchiffon;
}

button {
  width: auto; height: auto; margin: 1px 0; padding: 2px 8px 1px 8px;
  line-height: 17px; font-size: 13px; font-family: helvetica, sans-serif;
  outline: none; border: 1px solid peru; border-radius: 5px;
  color: slateblue; background-color: moccasin;
}

button:hover:not([disabled]) {
  background-color: lavender;
}

button:hover:active:not([disabled]) {
  border-color: purple !important;
}

input {
  height: 19px; padding: 2px 6px 1px; outline: none; margin: 0;
  font-size: 13px; font-family: helvetica, sans-serif;
  border: 1px solid peru; border-radius: 4px;
  color: darkred; background-color: transparent;
}

.textarea {
  width: 100%; height: calc(100vh - 130px);
  box-sizing: border-box; padding: 4px 8px 12px; margin: 0;
  font-size: 14px; line-height: 17px; font-family: monospace;
  text-align: left; white-space: pre-wrap; line-break: anywhere;
  outline: none; overflow-x: auto; overflow-y: scroll;
  border: 2px solid burlywood; border-radius: 6px;
  color: mediumblue; background-color: snow;
}

p {
  margin: 8px;
}

::selection {
  color: yellow; background-color: orchid;
}

r_ { color: crimson; }
g_ { color: seagreen; }
b_ { color: blue; }

</style></head><body onload="javascript:init()">

<h2 style="margin:0 0 10px"><r_>Inspector</r_></h2>

<div style="padding:5px 10px;background-color:pink">
<button onclick="javascript:open_sock()">Websocket</button> &nbsp;
<button onclick="javascript:open_window(0)">Open window</button> &nbsp;
<button onclick="javascript:open_window(1)">Open with iframe</button> &nbsp;
<button onclick="javascript:inspect()">Inspect</button> &nbsp;
<button onclick="javascript:print('')">Clear</button>
</div><p></p>
Name:&nbsp; <input type=text style="width:70px" value="boss"> &nbsp;&nbsp;
Target:&nbsp; <input type=text style="width:calc(100% - 290px);min-width:220px;max-width:730px">
<p></p>
<div class="textarea"></div><div id="inspect" style="display:none"></div>

<script>

var host, sock, win;
var text = document.querySelector (".textarea");
var line = document.querySelectorAll ("input");
var boss = line [0]; line = line [1];

var init = function ()
{
  host = "/"; print (""); show (0);
  window.onmessage = function (e) { print (": " + e.data); }

  if (location.hostname != "localhost")
  {
    var a = location.search, b = a[1], c = a.indexOf (b, 2) + 1;
    if (b == "$" || b == "@") if (c) host = "/" + a.substr (0, c);
  }
}

var show = function (mode)
{
  var x = document.querySelector ("button");
  x.style.color = x.style.borderColor = mode ? "mediumvioletred" : "forestgreen";
}

var open_sock = function ()
{
  if (sock) { sock.close(); return; }

  sock = location.origin.replace ("http", "ws") + host + "?" + boss.value.trim();
  print ("<connecting>"); sock = new WebSocket (sock);

  sock.onopen    = function( ) { print ("<websocket opened>"); show (1); }
  sock.onclose   = function( ) { print ("<websocket closed>"); show (0); sock = null; }
  sock.onerror   = function( ) { print ("<websocket error>"); }
  sock.onmessage = function(e) { print (e.data); }
}

var open_window = async (mode) =>
{
  var url = line.value.trim(); if (!mode || !url) { win = window.open (url, "inspect"); return; }

  url = '<!DOCTYPE html><html><body' +
    ' style="padding:0;margin:0;overflow:hidden"><iframe' +
    ' style="position:absolute;border:none;outline:none;width:100%;height:100%"' +
    ' sandbox="allow-scripts allow-same-origin allow-forms"' +
    ' src="' + url + '"></iframe></body></html>';

  await fetch (host + "~wanna_scratch=iframe$.htm", { method: 'POST', body: url });

  win = window.open (host + "~iframe$.htm", "inspect");
}

var inspect = function ()
{
  var a = win, b, c; if (!a || a.closed) { print ("> no window"); return; }

  try { if (b = a.document.body, c = b.children[0], c.nodeName == "IFRAME")
        { a = c.contentWindow; b = c.contentDocument.body; }
      } catch { print ("> not allowed"); return; }

  c = document.getElementById ("inspect"); c.innerHTML = "";
  c.setAttribute ("title", line.value); c.appendChild (b.cloneNode (true));

  console.log (a); console.log (b); print ("> see devtools");
}

var print = function (msg)
{
  if (typeof (msg) != "string") return;
  if (text.innerText.length > 60000) text.innerText = text.innerText.substr (-50000);
  if (msg) text.innerText += msg + "\n"; else text.innerText = "";
  text.scrollTop = text.scrollHeight;
}

/* <!--

--- Master version ---

function crap (...args)
{
  var m, n, p, q, u = [], w = window.top; w = w.opener || w;

  function x (r, s, t = typeof (r))
  {
    if (t == "string") return ('"' + r + '"');
    try { s = String (r) } catch { s = "<error>" }
    if (t != "object" && t != "function") return (s);
    if (s[0] == "[") return (s.substr (1, s.length - 2));
    return (s.replace (/\{\s*\[(native code)\]\s*\}/g, "{ $1 }"));
  }
  function y (r, s, t)
  {
    if (!Array.isArray (r)) return (x (r)); t = u.includes (r);
    s = []; u.push (r); if (!t) for (t of r) s.push (y (t));
    u.pop(); return ("[" + s.join (",") + "]");
  }
  function z (r) { try
  {
    for (p of r) { n++; q += "\n  " + s (p[0]) + ": " + y (p[1]); }
    function s (t) { return (typeof (t) != "string" ? "" : t); }
  } catch {} }

  function arr()
  {
    n = m.length; p = Object.entries (m).splice (n);
    q = "array " + n + " " + y (m); z (p); return (q);
  }
  function dom()
  {
    p = m.attributes; q = "element " + m.nodeName;
    for (n of p) q += ", " + n.name; return (q);
  }
  function obj()
  {
    n = 0; q = ""; p = Object.entries (m); if (!p.length) p = m;
    z (p); q = "object " + n + " {" + q + (n ? "\n}" : "}");
    return ((n || m.constructor == Object) ? q : x (m));
  }
  function str()
  {
    if (typeof (m) != "function") return (String (m));
    n = 0; q = x (m); z (Object.entries (m)); return (q);
  }

  function send()
  {
    if (m === undefined || m === null) m = String (m); else try
    {
      if (typeof (m) == "object") if (Array.isArray (m)) m = arr(); else
        if (m instanceof Element) m = dom(); else m = obj(); else m = str();
    }
    catch { m = "<error>" }

    if (m.length > 3000) m = m.substr (0,3000) + "\n<snip>"; w.postMessage (m, "*");
  }

  for (m of args) send();
}

--- Junior version ---

function crap (...args)
{
  var m, n, p, q, w = window.top; w = w.opener || w;

  function arr()
  {
    return ("array " + JSON.stringify (m));
  }
  function dom()
  {
    p = m.attributes; q = "element " + m.nodeName;
    for (n of p) q += ", " + n.name; return (q);
  }
  function obj()
  {
    return ("object " + JSON.stringify (m, null, 2));
  }

  function send()
  {
    if (m === undefined || m === null) m = String (m); else try
    {
      if (typeof (m) == "object") if (Array.isArray (m)) m = arr(); else
        if (m instanceof Element) m = dom(); else m = obj(); else m = String (m);
    }
    catch { m = "<error>" }

    if (m.length > 3000) m = m.substr (0, 3000) + "\n<snip>"; w.postMessage (m, "*");
  }

  for (m of args) send();
}

--> */

</script></body></html>
